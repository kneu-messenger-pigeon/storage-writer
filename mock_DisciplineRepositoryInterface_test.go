// Code generated by mockery v2.20.0. DO NOT EDIT.

package main

import (
	events "github.com/kneu-messenger-pigeon/events"
	mock "github.com/stretchr/testify/mock"
)

// MockDisciplineRepositoryInterface is an autogenerated mock type for the DisciplineRepositoryInterface type
type MockDisciplineRepositoryInterface struct {
	mock.Mock
}

// GetDiscipline provides a mock function with given fields: year, disciplineId
func (_m *MockDisciplineRepositoryInterface) GetDiscipline(year int, disciplineId uint) events.Discipline {
	ret := _m.Called(year, disciplineId)

	var r0 events.Discipline
	if rf, ok := ret.Get(0).(func(int, uint) events.Discipline); ok {
		r0 = rf(year, disciplineId)
	} else {
		r0 = ret.Get(0).(events.Discipline)
	}

	return r0
}

type mockConstructorTestingTNewMockDisciplineRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDisciplineRepositoryInterface creates a new instance of MockDisciplineRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDisciplineRepositoryInterface(t mockConstructorTestingTNewMockDisciplineRepositoryInterface) *MockDisciplineRepositoryInterface {
	mock := &MockDisciplineRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
